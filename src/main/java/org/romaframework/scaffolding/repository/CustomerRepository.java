package org.romaframework.scaffolding.repository;

import java.util.List;

import org.romaframework.aspect.persistence.PersistenceAspect;
import org.romaframework.aspect.persistence.QueryByFilter;
import org.romaframework.core.Roma;
import org.romaframework.core.repository.PersistenceAspectRepository;
import org.romaframework.scaffolding.domain.entity.Customer;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Component;

/**
 * Repository class for Person entity. By default it extends the ReverseQueryRepository class that delegates the execution of all
 * commands to the PersistenceAspect. <br/>
 * <br/>
 * This class was generated by Roma Meta Framework CRUD wizard.
 */
@Component("CustomerRepository")
@Lazy
public class CustomerRepository extends PersistenceAspectRepository<Customer> {
	@Override
	public List<Customer> getAll(PersistenceAspect db, Class<? extends Customer> iClass, Byte iStrategy, String iMode) {
		iClass = getEntityClass(iClass);
		QueryByFilter query = new QueryByFilter(iClass);
		if (iStrategy != null) {
			query.setStrategy(iStrategy);
		}
		if (iMode != null) {
			query.setMode(iMode);
		}
		return db.query(query);
	}

	@Override
	public Customer create(Customer object) {
		return Roma.context().persistence().updateObject(object, PersistenceAspect.STRATEGY_DETACHING);
	}

}
